{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Jatin/Downloads/Compressed/iCinema-master/iCinema-master/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Jatin/Downloads/Compressed/iCinema-master/iCinema-master/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Axios from \"axios\";\nimport { GET_MOVIES_SUCCESS, GET_MOVIES_ERROR } from \"./actionTypes\";\nexport var getMovies = function getMovies() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dispatch) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Axios.get(\"/api/movies\");\n            case 3:\n              result = _context.sent;\n              dispatch({\n                type: GET_MOVIES_SUCCESS,\n                payload: result.data.movies\n              });\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: GET_MOVIES_ERROR,\n                error: _context.t0\n              });\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var addMovie = function addMovie(movie) {\n  var contentType = {\n    headers: {\n      \"content-type\": \"multipart/form-data\"\n    }\n  };\n  var formData = new FormData();\n  formData.append(\"title\", movie.title);\n  formData.append(\"numberInStock\", movie.numberInStock);\n  formData.append(\"genre\", movie.genre);\n  formData.append(\"image\", movie.image);\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dispatch) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return Axios.post(\"/api/movies/addmovie\", formData, contentType);\n            case 3:\n              result = _context2.sent;\n              dispatch({\n                type: GET_MOVIES_SUCCESS,\n                payload: result.data.movies\n              });\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: GET_MOVIES_ERROR,\n                error: _context2.t0\n              });\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["Axios","GET_MOVIES_SUCCESS","GET_MOVIES_ERROR","getMovies","dispatch","get","result","type","payload","data","movies","error","addMovie","movie","contentType","headers","formData","FormData","append","title","numberInStock","genre","image","post"],"sources":["C:/Users/Jatin/Downloads/Compressed/iCinema-master/iCinema-master/frontend/src/actions/moviesAction.js"],"sourcesContent":["import Axios from \"axios\";\nimport { GET_MOVIES_SUCCESS, GET_MOVIES_ERROR } from \"./actionTypes\";\n\nexport const getMovies = () => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.get(\"/api/movies\");\n      dispatch({ type: GET_MOVIES_SUCCESS, payload: result.data.movies });\n    } catch (error) {\n      dispatch({ type: GET_MOVIES_ERROR, error });\n    }\n  };\n};\n\nexport const addMovie = (movie) => {\n  const contentType = {\n    headers: {\n      \"content-type\": \"multipart/form-data\",\n    },\n  };\n  let formData = new FormData();\n  formData.append(\"title\", movie.title);\n  formData.append(\"numberInStock\", movie.numberInStock);\n  formData.append(\"genre\", movie.genre);\n  formData.append(\"image\", movie.image);\n\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post(\n        \"/api/movies/addmovie\",\n        formData,\n        contentType\n      );\n      dispatch({ type: GET_MOVIES_SUCCESS, payload: result.data.movies });\n    } catch (error) {\n      dispatch({ type: GET_MOVIES_ERROR, error });\n    }\n  };\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,eAAe;AAEpE,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAS,GAAS;EAC7B;IAAA,sEAAO,iBAAOC,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEGJ,KAAK,CAACK,GAAG,CAAC,aAAa,CAAC;YAAA;cAAvCC,MAAM;cACZF,QAAQ,CAAC;gBAAEG,IAAI,EAAEN,kBAAkB;gBAAEO,OAAO,EAAEF,MAAM,CAACG,IAAI,CAACC;cAAO,CAAC,CAAC;cAAC;cAAA;YAAA;cAAA;cAAA;cAEpEN,QAAQ,CAAC;gBAAEG,IAAI,EAAEL,gBAAgB;gBAAES,KAAK;cAAC,CAAC,CAAC;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE/C;IAAA;MAAA;IAAA;EAAA;AACH,CAAC;AAED,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,KAAK,EAAK;EACjC,IAAMC,WAAW,GAAG;IAClBC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EACD,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAC7BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,KAAK,CAACM,KAAK,CAAC;EACrCH,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEL,KAAK,CAACO,aAAa,CAAC;EACrDJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,KAAK,CAACQ,KAAK,CAAC;EACrCL,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,KAAK,CAACS,KAAK,CAAC;EAErC;IAAA,uEAAO,kBAAOlB,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEGJ,KAAK,CAACuB,IAAI,CAC7B,sBAAsB,EACtBP,QAAQ,EACRF,WAAW,CACZ;YAAA;cAJKR,MAAM;cAKZF,QAAQ,CAAC;gBAAEG,IAAI,EAAEN,kBAAkB;gBAAEO,OAAO,EAAEF,MAAM,CAACG,IAAI,CAACC;cAAO,CAAC,CAAC;cAAC;cAAA;YAAA;cAAA;cAAA;cAEpEN,QAAQ,CAAC;gBAAEG,IAAI,EAAEL,gBAAgB;gBAAES,KAAK;cAAC,CAAC,CAAC;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE/C;IAAA;MAAA;IAAA;EAAA;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}